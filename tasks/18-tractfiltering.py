# -*- coding: utf-8 -*-
import os
from core.toad.generictask import GenericTask
from lib import mriutil, util
from lib.images import Images


class TractFiltering(GenericTask):
    def __init__(self, subject):
        GenericTask.__init__(self, subject,
                             'preparation', 'registration', 'tensorfsl',
                             'hardidipy', 'tractquerier', 'qa')
        self.setCleanupBeforeImplement(False)
        self.relativeOutDir = 'raw/outlier_cleaned_tracts'
        self.absOutDir = os.path.join(self.workingDir, 'raw', 'outlier_cleaned_tracts')

    def implement(self):

        mriutil.setWorkingDirTractometry(
                self.workingDir,
                self.getTractQuerierImages('dwi', None, 'trk'),
                [(self.getTensorFSLImage('dwi', 'fa'), 'fsl_fa.nii.gz')])

        configFile = self.__getConfigFile(
                'configTractFiltering', 'configTractFiltering_default')

        cmdTpl = "scil_run_tractometry.py --config_file {0} {1} {1} -v -f "
        cmd = cmdTpl.format(configFile, self.workingDir)
        self.launchCommand(cmd)

    def isIgnore(self):
        return self.get("ignore")

    def meetRequirement(self):
        """Validate if all requirements have been met prior to launch the task
        Returns:
            True if all requirement are meet, False otherwise
        """
        trks = self.getTractQuerierImages('dwi', None, 'trk')
        if len(trks) > 0:
            return True
        else:
            return False


    def isDirty(self):
        """Validate if this tasks need to be submit during the execution
        Returns:
            True if any expected file or resource is missing, False otherwise
        """
        return not os.path.isdir(self.absOutDir)


    def __getConfigFile(self, prefix, defaultFile):

        target = self.getPreparationImage(prefix, None, 'json')
        if target:
            util.symlink(target, self.buildName(target, None, 'json'))
        else:
            defaultFileName = '{}.json'.format(defaultFile)
            defaultFileLink = os.path.join(
                self.toadDir,
                "templates",
                "tractometry",
                defaultFileName,
            )
            target = defaultFileLink
            util.copy(defaultFileLink, self.workingDir, defaultFileName)
        return target

    def __buildNameTractfilteringOutputs(self):
        self.outputs = [self.getImage('dwi', 'cc_2', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'ioff.left', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'ioff.right', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'ilf.left', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'ilf.right', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'uf.left', 'trk', self.relativeOutDir),
                        self.getImage('dwi', 'uf.right', 'trk', self.relativeOutDir),
                        #self.getImage('dwi', 'cortico_spinal.left', 'trk', self.relativeOutDir),
                        #self.getImage('dwi', 'cortico_spinal.right', 'trk', self.relativeOutDir),
                        ]

    def qaSupplier(self):
        """Create and supply images for the report generated by qa task
        """
        qaImages = Images()

        information = "Warning: due to storage restriction, streamlines were " \
                      "downsampled. Even if there is no difference in structural " \
                      "connectivity, you should be careful before computing any " \
                      "metrics along these streamlines.\n To run toad without this " \
                      "downsampling, please refer to the documentation."

        if self.defaultQuery:
            # get images
            norm = self.getRegistrationImage("norm", "resample")
            self.__buildNameTractfilteringOutputs()
            # images production
            tags = (
                (self.outputs[0],
                 'Corpus Callosum',
                 95, 60, 40, -80, 0, 160),
                (self.outputs[1],
                 'Inferior Fronto Occipital tract left',
                 95, 80, 40, -90, 0, 90),
                (self.outputs[2],
                 'Inferior Fronto Occipital tract right',
                 95, 80, 40, -90, 0, -90),
                (self.outputs[3],
                 'inferior Longitudinal Fasciculus left',
                 95, 80, 40, -90, 0, 90),
                (self.outputs[4],
                 'Inferior Longitudinal Fasciculus right',
                 95, 80, 40, -90, 0, -90),
                (self.outputs[5],
                 'Uncinate Fasciculus left',
                 95, 80, 40, -90, 0, 90),
                (self.outputs[6],
                 'Uncinate Fasciculus right',
                 95, 80, 40, -90, 0, -90),
                #(self.outputs[7],
                # 'Corticospinal tract Left',
                # 95, 80, 40, -90, 0, 160),
                #(self.outputs[8],
                # 'Corticospinal tract right',
                # 95, 80, 40, -90, 0, 200),
                )

            for data, description, xSlice, ySlice, zSlice, xRot, yRot, zRot in tags:
                if data is not None:
                    imageQa = self.plotTrk(data, norm, None, xSlice, ySlice, zSlice, xRot, yRot, zRot)
                    qaImages.append((imageQa, description))
                else:
                    # Add message about QA
                    pass
        else:
            information = """
            Because you didn't choose default queries and dictionnary,
            we are not able to create proper screenshots of the output bundles.
            """
        qaImages.setInformation(information)

        return qaImages
