#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import imp
import sys
import os
from xml.dom import minidom

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
from core.toad import logger
from lib import util, xmlhelper, arguments

__author__ = "Mathieu Desrosiers, Arnaud Bore, and Christophe Bedetti"
__copyright__ = "Copyright (C) 2014, TOAD"
__credits__ = ["Mathieu Desrosiers", "Arnaud Bore", "Christophe Bedetti", "Guillaume Vallet", "Basile Pinsard"]
__license__ = "GPL v2"
__version__ = "1.1"
__maintainer__ = "Mathieu Desrosiers"
__email__ = "mathieu.desrosiers@criugm.qc.ca"
__status__ = "Production"

__pythonPackages = ['numpy', 'scipy', 'nibabel', 'dipy', 'matplotlib',  'vtk']


def __parseArguments():
    """Prepare and parse user friendly command line arguments for sys.argv.

    Returns:
        a args structure containing command lines arguments
    """
    parser = arguments.Parser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description ="""\n
        Pipeline that realize your dream,
        Please consult the documentation at http://unf-montreal.ca/toad
        for furthers informations""",
                                epilog= """\n

        An input directory must have the following structure

             |-input---\\
             |         |- anat_001.nii
             |         |- dwi_001.nii
             |         |- dwi_001.b ou (dwi_001.bvals et dwi_001.bvecs)
             |         |-(optionnal) b0ap_001.nii
             |         |-(optionnal) b0pa_001.nii
             |         |-(optionnal) mag_001.nii
             |         |-(optionnal) phase_001.nii
             |         |-(optionnal) config.cfg
             |         |-(optionnal) A freesurfer directory structure


        Then a subject completed will look like this
        sujN--\\
              |- 00-backup
              |- 00-outputs
              |- 00-qa
              |- 01-preparation
              |- 02-parcellation
              |- 03-atlas
              |- 04-denoising
              |- 05-correction
              |- 06-upsampling
              |- 07-registration
              |- 08-atlasregistration
              |- 09-masking
              |- 10-tensorfsl
              |- 11-tensormrtrix
              |- 12-tensordipy
              |- 13-hardimrtrix
              |- 14-hardidipymrtrix
              |- 15-tractographymrtrix
              |- 16-tractographydipy
              |- 17-tractquerier
              |- 18-tractfiltering
              |- 19-tractometry           
              |- 99-logs


        Please report bugs to toadunf.criugm@gmail.com

           When you feel like a toad on the highway of life...
           and everyone seems like a steel-belted radial tire...
           when you\'re lyin\' there squished in an assortment of bodily fluids...
           at least you left your mark.  (The red green show)

        """)
    parser.add_argument("inputs", nargs='+', help="Specify the directories where we should find the subjects, wildcard * ? are accepted")
    parser.add_argument("-c", "--config", metavar=('filename'), required=False, action='append',
                            help="Specify the location of an alternative the config.cfg file")
    parser.add_argument("-d","--debug", help="Add additionnal information during the pipeline execution",
                            action="store_true")

    parser.add_argument("-s","--skipValidation", help="Skip the initial validation process (not recommended)",
                            action="store_true")

    parser.add_argument("-t", "--task",  metavar=('task_file_name'), required=False, action='append',
                            help="Specify a custom task to be submit")

    parser.add_argument("-b", "--stopBeforeTask", nargs='?',metavar=('task_name'), required=False,
                            help="Stop the pipeline at the beginning of a specific task. TOAD will create the working directory."
                                 "Note this command will apply to all subject.")
    parser.add_argument("-a","--noTractography", help="Do not produce diffusion weighted imaging neural tracts", action="store_true")
    parser.add_argument("-p","--noPrompt", help=("Disable command prompt and assume yes to any answer (not recommended)"), action="store_true")
    parser.add_argument("-r","--reinitialize", help="reinitialize and cleanup the study at is initial stage", action="store_true")
    parser.add_argument("-e","--emergency", help=("Overwrite nb_threads parameter and deploy unlimited number of threads at each parallelizable steps. "
                        "effective only if --local is specified"
                        ), action="store_true")
    parser.add_argument("-l","--local", help=("Do not use the Grid Engine during pipeline execution"), action="store_true")
    parser.add_argument("-q", "--queue", nargs='?',metavar=('queue_name'), required=False,
                            help="Specify an alternative queue name to use for the grid engine")
    parser.add_argument('-v', '--version', action='version', version="%(prog)s ({})".format(__version__))

    args = parser.parse_args()
    args.subject = None
    args.matlabIsAvailable = None

    return args


def __manageEnvironnement(logger, arguments):
    """Set and verify environments variables and lib importations for prior utilisation

    Args:
        logger: the logger
        arguments: an argument parser object

    """

    serverName = os.environ.get('TOADSERVER')
    if serverName is "local" or serverName is None:
        try:
            version = float(sys.version[0:3])
            if version < 2.7:
                logger.warning("Note that toad had never run with a version of python < 2.7", pause=True)
        except ValueError:
            logger.error("Cannot determine your version of python installed")

        for package in __pythonPackages:
            try:
                imp.find_module(package)
            except ImportError:
                    logger.error("Cannot find or missing package {}. Have you source unf-toad-config.sh?".format(package))
        try:
            os.environ["FREESURFER_HOME"]
        except KeyError:
            logger.error("Please set the environment variable FREESURFER_HOME and source FreeSurferEnv.sh file")

        try:
            os.environ["FSLDIR"]
        except KeyError:
            logger.error("Please set the environment variable FSLDIR and source fslconf/fsl.sh file")
            sys.exit()

        mrtrix = util.which("transformcalc")
        if mrtrix is None:
            if util.which("tckgen") is None:
                logger.error("Mrtrix3 not found. Please install the package or set the environment variable $PATH correctly")
            else:
                logger.error("Your version of Mrtrix3 is too old, transformcalc could not be found. Please install the package again. ")

        if util.which("matlab") is None:
            arguments.matlabIsAvailable = False
            logger.warning("Matlab not found. Please install matlab or set the environment variable $PATH correctly", pause=True)

        else:
            arguments.matlabIsAvailable = True

        result = util.which("convert")
        if result is None:
            logger.error("ImageMagick not found. Please install the package or set the environment variable $PATH correctly")

        result = util.which("qsub")
        if result is None:
            logger.warning("No grid engine found. Pipeline will run locally", pause=True)
            arguments.local = True

    else:
        arguments.matlabIsAvailable = False if "mammouth" in serverName else True
        logger.info("Configuration for {} server found".format(os.environ.get('TOADSERVER')))

    return arguments


def __manageVersions(logger, arguments):
    """Set and verify versions of packages and softwares that will be use during the pipeline

    Args:
        logger: the logger
        arguments: an argument parser object

    Return:
        A minidom document which contain any usefull information about software versions

    """


    xmlDocument = minidom.Document()
    softwaresTag = xmlDocument.createElement("softwares")
    logger.info("Toad is running at version: {}".format(__version__))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('Toad', __version__))

    logger.info("Computer identification: {}".format(" ".join(os.uname())))
    logger.info("Python is running at version: {}".format(sys.version[0:6]))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('Python', sys.version[0:6]))

    command, output, results = util.launchCommand("fast")
    version = [line.replace("Part of FSL", "") for line in results.splitlines() if "build" in line].pop()
    logger.info("FSL is running at version: {}".format(version))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('FSL', version))
    command, version, errors = util.launchCommand("cat  $FREESURFER_HOME/build-stamp.txt")
    version = version.strip()
    logger.info("Freesurfer is running at version: {}".format(version))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('Freesurfer', version))

    command, results, errors = util.launchCommand("tckgen -version")
    version = [line.replace("tckgen", "").strip("== ") for line in results.splitlines() if "tckgen" in line].pop()
    logger.info("Mrtrix is running at version: {}".format(version))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('Mrtrix', version))


    if arguments.matlabIsAvailable:
        found = False
        cmd = "matlab -nodisplay -nodesktop -nojvm -nosplash -r \"quit\""
        command, results, errors = util.launchCommand(cmd)
        messages=results.splitlines()
        for index, token in enumerate(messages):
            if "< M A T L A B (R) >" in token:
                version = messages[index+2].strip()
                logger.info("Matlab is running at version: {}".format(version))
                softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('Matlab', version))
                found = True
                break
        if not found:
            logger.warning("Cannot determine Matlab version")

    cmd = "convert -version"
    command, results, errors = util.launchCommand(cmd)
    version = [line for line in results.splitlines() if "Version:" in line].pop().split()
    version = " ".join(version[2:6])
    logger.info("ImageMagick is running at version: {}".format(version))
    softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag('ImageMagick', version))

    for package in __pythonPackages:
        module = __import__(package)
        if not "vtk" in package:
            logger.info("{} is at version: {}".format(package, module.__version__))
            softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag(package,  module.__version__))

        else:
            logger.info("{} is at version: {}".format("vtk", module.vtkVersion.GetVTKVersion()))
            softwaresTag.appendChild(xmlhelper.createSoftwareNameVersionTag("vtk", module.vtkVersion.GetVTKVersion()))
    return softwaresTag

if __name__ == '__main__':

    #create a logger
    logger = logger.Logger()

    #parse arguments provide in command line
    arguments = __parseArguments()

    #manage the environment
    arguments = __manageEnvironnement(logger, arguments)

    #make sure to log versions before starting the pipeline
    xmlSoftwaresVersions = __manageVersions(logger, arguments)

    #define toad directory
    realPath = os.path.realpath(__file__)
    arguments.toadDir = os.path.dirname(realPath).replace("bin", "")

    #Launch the manager
    from core.toad import subjectmanager
    result = subjectmanager.SubjectManager(arguments, xmlSoftwaresVersions).run()
